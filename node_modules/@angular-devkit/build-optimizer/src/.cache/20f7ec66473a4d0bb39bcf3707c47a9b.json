{"remainingRequest":"/Users/swmoon/Dev/Source/Angular/PAAS-TA-PORTAL-WEBUSER/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/swmoon/Dev/Source/Angular/PAAS-TA-PORTAL-WEBUSER/node_modules/ngx-logger/index.js","dependencies":[{"path":"/Users/swmoon/Dev/Source/Angular/PAAS-TA-PORTAL-WEBUSER/node_modules/ngx-logger/index.js","mtime":1521032386000},{"path":"/Users/swmoon/Dev/Source/Angular/PAAS-TA-PORTAL-WEBUSER/node_modules/cache-loader/dist/cjs.js","mtime":1520917517352},{"path":"/Users/swmoon/Dev/Source/Angular/PAAS-TA-PORTAL-WEBUSER/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable, NgModule, Optional, PLATFORM_ID } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LoggerConfig = /*@__PURE__*/ (function () {\n    function LoggerConfig() {\n    }\n    return LoggerConfig;\n}());\n/** @enum {number} */\nvar NgxLoggerLevel = /*@__PURE__*/ (function () {\n    var NgxLoggerLevel = {\n        TRACE: 0,\n        DEBUG: 1,\n        INFO: 2,\n        LOG: 3,\n        WARN: 4,\n        ERROR: 5,\n        OFF: 6,\n    };\n    NgxLoggerLevel[NgxLoggerLevel.TRACE] = \"TRACE\";\n    NgxLoggerLevel[NgxLoggerLevel.DEBUG] = \"DEBUG\";\n    NgxLoggerLevel[NgxLoggerLevel.INFO] = \"INFO\";\n    NgxLoggerLevel[NgxLoggerLevel.LOG] = \"LOG\";\n    NgxLoggerLevel[NgxLoggerLevel.WARN] = \"WARN\";\n    NgxLoggerLevel[NgxLoggerLevel.ERROR] = \"ERROR\";\n    NgxLoggerLevel[NgxLoggerLevel.OFF] = \"OFF\";\n    return NgxLoggerLevel;\n}());\nvar Levels = [\n    'TRACE',\n    'DEBUG',\n    'INFO',\n    'LOG',\n    'WARN',\n    'ERROR',\n    'OFF'\n];\nvar NGXLogger = /*@__PURE__*/ (function () {\n    function NGXLogger(http$$1, platformId, options) {\n        this.http = http$$1;\n        this.platformId = platformId;\n        this.options = options;\n        this.options = this.options ? this.options : {\n            level: NgxLoggerLevel.OFF,\n            serverLogLevel: NgxLoggerLevel.OFF\n        };\n        this._serverLogLevel = this.options.serverLogLevel;\n        this._clientLogLevel = this.options.level;\n        this._isIE = isPlatformBrowser(platformId) &&\n            !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n    }\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.trace = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.TRACE, true, message, additional);\n        };\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.debug = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.DEBUG, true, message, additional);\n        };\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.info = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.INFO, true, message, additional);\n        };\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.log = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.LOG, true, message, additional);\n        };\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.warn = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.WARN, true, message, additional);\n        };\n    /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n    NGXLogger.prototype.error = /**\n     * @param {?} message\n     * @param {...?} additional\n     * @return {?}\n     */\n        function (message) {\n            var additional = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                additional[_i - 1] = arguments[_i];\n            }\n            this._log(NgxLoggerLevel.ERROR, true, message, additional);\n        };\n    /**\n     * @return {?}\n     */\n    NGXLogger.prototype._timestamp = /**\n     * @return {?}\n     */\n        function () {\n            return new Date().toISOString();\n        };\n    /**\n     * @param {?} level\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n    NGXLogger.prototype._logOnServer = /**\n     * @param {?} level\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n        function (level, message, additional) {\n            var _this = this;\n            if (additional === void 0) {\n                additional = [];\n            }\n            // If the loggingUrl is not set or if the user provides a serverLogLevel and the current level is than that, do not log.\n            if (!this.options.serverLoggingUrl || level < this._serverLogLevel) {\n                return;\n            }\n            var /** @type {?} */ headers = new HttpHeaders().set('Content-Type', 'application/json');\n            var /** @type {?} */ messageToLog = '';\n            try {\n                messageToLog = JSON.stringify(message);\n            }\n            catch (e) {\n                messageToLog = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n            }\n            var /** @type {?} */ additionalToLog = [];\n            if (additional === null || additional === undefined) {\n                additionalToLog = [];\n            }\n            else {\n                additionalToLog = additional.map(function (val, idx) {\n                    try {\n                        return val === null || val === undefined || typeof val === 'string' ? val\n                            : JSON.stringify(val, null, 2);\n                    }\n                    catch (e) {\n                        return \"The additional[\" + idx + \"] value could not be parsed using JSON.stringify().\";\n                    }\n                });\n            }\n            this.http.post(this.options.serverLoggingUrl, {\n                level: Levels[level],\n                message: messageToLog,\n                additional: additionalToLog,\n                timestamp: this._timestamp()\n            }, {\n                headers: headers\n            })\n                .subscribe(function (res) { return _this._log(NgxLoggerLevel.TRACE, false, 'Server logging successful', [res]); }, function (error) { return _this._log(NgxLoggerLevel.ERROR, false, 'FAILED TO LOG ON SERVER', [error]); });\n        };\n    /**\n     * @param {?} level\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n    NGXLogger.prototype._logIE = /**\n     * @param {?} level\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n        function (level, message, additional) {\n            if (additional === void 0) {\n                additional = [];\n            }\n            switch (level) {\n                case NgxLoggerLevel.WARN:\n                    console.warn.apply(console, [this._timestamp() + \" [\" + Levels[level] + \"] \", message].concat(additional));\n                    break;\n                case NgxLoggerLevel.ERROR:\n                    console.error.apply(console, [this._timestamp() + \" [\" + Levels[level] + \"] \", message].concat(additional));\n                    break;\n                case NgxLoggerLevel.INFO:\n                    console.info.apply(console, [this._timestamp() + \" [\" + Levels[level] + \"] \", message].concat(additional));\n                    break;\n                default:\n                    console.log.apply(console, [this._timestamp() + \" [\" + Levels[level] + \"] \", message].concat(additional));\n            }\n        };\n    /**\n     * @param {?} level\n     * @param {?} logOnServer\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n    NGXLogger.prototype._log = /**\n     * @param {?} level\n     * @param {?} logOnServer\n     * @param {?} message\n     * @param {?=} additional\n     * @return {?}\n     */\n        function (level, logOnServer, message, additional) {\n            if (additional === void 0) {\n                additional = [];\n            }\n            if (!message) {\n                return;\n            }\n            // Allow logging on server even if client log level is off\n            if (logOnServer) {\n                this._logOnServer(level, message, additional);\n            }\n            // if no message or the log level is less than the environ\n            if (level < this._clientLogLevel) {\n                return;\n            }\n            try {\n                message = typeof message === 'string' ? message\n                    : JSON.stringify(message, null, 2);\n            }\n            catch (e) {\n                additional = [message].concat(additional);\n                message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n            }\n            // Coloring doesn't work in IE\n            if (this._isIE) {\n                return this._logIE(level, message, additional);\n            }\n            var /** @type {?} */ color = this._getColor(level);\n            console.log.apply(console, [\"%c\" + this._timestamp() + \" [\" + Levels[level] + \"]\", \"color:\" + color, message].concat(additional));\n        };\n    /**\n     * @param {?} level\n     * @return {?}\n     */\n    NGXLogger.prototype._getColor = /**\n     * @param {?} level\n     * @return {?}\n     */\n        function (level) {\n            switch (level) {\n                case NgxLoggerLevel.TRACE:\n                    return 'blue';\n                case NgxLoggerLevel.DEBUG:\n                    return 'teal';\n                case NgxLoggerLevel.INFO:\n                case NgxLoggerLevel.LOG:\n                    return 'gray';\n                case NgxLoggerLevel.WARN:\n                case NgxLoggerLevel.ERROR:\n                    return 'red';\n                case NgxLoggerLevel.OFF:\n                default:\n                    return;\n            }\n        };\n    return NGXLogger;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NGXLoggerMock = /*@__PURE__*/ (function () {\n    function NGXLoggerMock() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.trace = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.debug = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.info = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    NGXLoggerMock.prototype.error = /**\n     * @param {?} message\n     * @return {?}\n     */\n        function (message) {\n        };\n    return NGXLoggerMock;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LoggerModule = /*@__PURE__*/ (function () {\n    function LoggerModule() {\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    LoggerModule.forRoot = /**\n     * @param {?} config\n     * @return {?}\n     */\n        function (config) {\n            return {\n                ngModule: LoggerModule,\n                providers: [\n                    { provide: LoggerConfig, useValue: config || {} },\n                    NGXLogger,\n                    NGXLoggerMock\n                ]\n            };\n        };\n    /**\n     * @return {?}\n     */\n    LoggerModule.forChild = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: LoggerModule,\n                providers: [\n                    NGXLogger,\n                    NGXLoggerMock\n                ]\n            };\n        };\n    return LoggerModule;\n}());\nexport { LoggerModule, NGXLoggerMock, LoggerConfig, NgxLoggerLevel, NGXLogger };\n",null]}